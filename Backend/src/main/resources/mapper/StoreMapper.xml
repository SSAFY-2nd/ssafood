<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.backend.mapper.StoreMapper">

    <!--  음식점 id를 기준으로 음식점 정보 확인 -->
    <select id="findById" resultType="Store">
        select * from store where store_id = #{id}
    </select>

    <!--  음식점 id를 기준으로 음식점 정보 확인 -->
    <select id="findByKeyword" resultType="com.backend.dto.store.Store">
        select * from store where area LIKE CONCAT('%', #{keyword}, '%')
        UNION
        select * from store where name LIKE CONCAT('%', #{keyword}, '%')
        UNION
        select * from store where category LIKE CONCAT('%', #{keyword}, '%')
    </select>

    <!--  100개 음식점 검색 -->
    <select id="findAllStore" resultType="com.backend.dto.store.Store">
        select * from store limit 100;
    </select>


    <!-- 주변 위치 음식점 모두 찾기  -->
    <select id="findNearLocation" resultType="com.backend.dto.store.StoreLength">
        SELECT *,
        ROUND((6371*acos(cos(radians(37.481571))*cos(radians(latitude))*cos(radians(longtitude)
        -radians(126.958650))+sin(radians(37.481571))*sin(radians(latitude))))*1000,0)
        AS distance
        FROM store
        WHERE store.latitude is not NULL
        HAVING distance <![CDATA[ <= ]]> 1000
        ORDER BY distance
        limit 100
    </select>

<!--    select review_info.store_id, name, branch, area, tel, address, latitude, longtitude, category, menu-->
<!--    from review_info, (select * from store where address like '%마포구 동교동%') as subquery1-->
<!--    where review_info.store_id = subquery1.store_id-->
<!--    group by review_info.store_id order by avg(total_score) DESC-->
<!--    limit 20;-->
    <!-- 주변 인기 음식점 20개 찾기   -->
    <select id="findPopularLocation" resultType="com.backend.dto.store.Store">
        select review_info.store_id, name, branch, area, tel, address, latitude, longtitude, category, menu
        from review_info, (select * from store where address LIKE CONCAT('%', #{address}, '%')) as subquery1
        where review_info.store_id = subquery1.store_id
        group by review_info.store_id order by avg(total_score) DESC
        limit 20;
    </select>

</mapper>